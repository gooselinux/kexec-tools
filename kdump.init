#! /bin/sh
### BEGIN INIT INFO
# Provides: kdump 
# Default-Start:  3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop kdump crash recovery service 
# Description:  The kdump init script provides the support necessary for
#		loading a kdump kernel into memory at system bootup time,
#		and for copying away a vmcore at system panic time. 
### END INIT INFO
#  Copyright 2005 Red Hat, Inc.
#
#  chkconfig: - 20 80
#
#  Author:  Jeff Moyer <jmoyer@redhat.com>


# Source function library.
. /etc/init.d/functions

KEXEC=/sbin/kexec

# Will be different for ia64, for example.  For now, that architecture isn't
# supported.  Code needs to be added here when we do.
BOOTDIR="/boot"

KDUMP_KERNELVER=""
KDUMP_COMMANDLINE=""
KDUMP_IDE_NOPROBE_COMMANDLINE=""
KEXEC_ARGS=""
KDUMP_CONFIG_FILE="/etc/kdump.conf"
MEM_RESERVED=""

LOGGER="/usr/bin/logger -p info -t kdump"

standard_kexec_args="-p"

if [ -f /etc/sysconfig/kdump ]; then
	. /etc/sysconfig/kdump
fi

function save_core()
{
	coredir="/var/crash/`date +"%Y-%m-%d-%H:%M"`"

	mkdir -p $coredir
	makedumpfile -c --message-level 1 -d 31 /proc/vmcore $coredir/vmcore-incomplete
	if [ $? == 0 ]; then
		mv $coredir/vmcore-incomplete $coredir/vmcore
		$LOGGER "saved a vmcore to $coredir"
	else
		$LOGGER "failed to save a vmcore to $coredir"
	fi
}

function check_config()
{
	if [ -f /etc/kdump-adv-conf/initramfs.conf ]
	then
		$LOGGER "Using Kdump advanced configuration service"
		if [ -n "$DRACUT_CMD" ]
		then
			MKDUMPRD=$DRACUT_CMD
		else
			MKDUMPRD="dracut -f -c /etc/kdump-adv-conf/initramfs.conf"
		fi
		# We always rebuild here, since it takes longer
		# to figure out if anything has changed
		touch /etc/kdump.conf
	else
		MKDUMPRD="/sbin/mkdumprd -d -f"
	fi

	if [ -z "$KDUMP_KERNELVER" ]; then
		local running_kernel=`uname -r`

		kdump_kver=`echo $running_kernel | sed 's/smp//g'`
	else
		kdump_kver=$KDUMP_KERNELVER
	fi

	kdump_kernel="${KDUMP_BOOTDIR}/${KDUMP_IMG}-${kdump_kver}${KDUMP_IMG_EXT}"
	kdump_initrd="${KDUMP_BOOTDIR}/initrd-${kdump_kver}kdump.img"

	if [ ! -f $kdump_kernel ]; then
		echo -n "No kdump kernel image found."; warning; echo
		echo "Tried to locate ${kdump_kernel}"
		return 0
	fi

	if [ ! -f $kdump_initrd ]; then
		echo  -n "No kdump initial ramdisk found."; warning; echo
		echo "Rebuilding $kdump_initrd"
		$MKDUMPRD $kdump_initrd $kdump_kver
		if [ $? != 0 ]; then
			echo "Failed to run mkdumprd"
			$LOGGER "mkdumprd: failed to make kdump initrd"
			exit 1
		fi
		return 0
	fi

        #check to see if config file or kdump post has been modified
        #since last build of the image file
        image_time=`stat -c "%Y" $kdump_initrd`
        EXTRA_FILES=`grep ^kdump_post $KDUMP_CONFIG_FILE | cut -d\  -f2`
        CHECK_FILE=`grep ^kdump_pre $KDUMP_CONFIG_FILE | cut -d\  -f2`
        EXTRA_FILES="$EXTRA_FILES $CHECK_FILE"
        CHECK_FILE=`grep ^extra_modules $KDUMP_CONFIG_FILE | cut -d\  -f2-`
        EXTRA_FILES="$EXTRA_FILES $CHECK_FILE"
        CHECK_FILE=`grep ^extra_bins $KDUMP_CONFIG_FILE | cut -d\  -f2-`
        EXTRA_FILES="$EXTRA_FILES $CHECK_FILE"
        FORCE_REBUILD=`grep ^extra_modules $KDUMP_CONFIG_FILE`
        files="$KDUMP_CONFIG_FILE $kdump_kernel $EXTRA_FILES"
        modified_files=""
        for file in $files; do
                time_stamp=0
                if [ -f "$file" ]; then
                        time_stamp=`stat -c "%Y" $file`
                else
                        modified_files="$modified_files $file"
                        continue
                fi
                if [ "$time_stamp" -gt "$image_time" ]; then
                        modified_files="$modified_files $file"
                fi
        done

        if [ -n "$FORCE_REBUILD" -a "$modified_files"!=" " ]
        then
                modified_files="force_rebuild"
        fi

        if [ -n "$modified_files" -a "$modified_files"!=" " ]; then
                if [ "$modified_files" != "force_rebuild" ]
                then
                        echo "Detected change(s) the following file(s):"
                        echo -n "  "; echo "$modified_files" | sed 's/\s/\n  /g'
                fi
                echo "Rebuilding $kdump_initrd"
                /sbin/mkdumprd -d -f $kdump_initrd $kdump_kver
                if [ $? != 0 ]; then
                        echo "Failed to run mkdumprd"
                        $LOGGER "mkdumprd: failed to make kdump initrd"
                        return 1
                fi
        fi
        return 0
}

# This function check iomem and determines if we have more than
# 4GB of ram available. Returns 1 if we do, 0 if we dont
function need_64bit_headers()
{
    return `tail -n 1 /proc/iomem | awk '{ split ($1, r, "-"); \
    print (strtonum("0x" r[2]) > strtonum("0xffffffff")); }'`
}

function avoid_cdrom_drive()
{
	local DRIVE=""
	local MEDIA=""
	local IDE_DRIVES=(`echo hd{a,b,c,d}`)
	local COUNTER="0"

	for DRIVE in ${IDE_DRIVES[@]}
	do
		if ! $(echo "$KDUMP_COMMANDLINE" |grep -q "$DRIVE=");then
			if [ -f /proc/ide/$DRIVE/media ];then
				MEDIA=$(cat /proc/ide/$DRIVE/media)
				if [ x"$MEDIA" == x"cdrom" ]; then
					KDUMP_IDE_NOPROBE_COMMANDLINE="$KDUMP_IDE_NOPROBE_COMMANDLINE $DRIVE=cdrom"
					COUNTER=$(($COUNTER+1))
				fi
			fi
		else
			KDUMP_IDE_NOPROBE_COMMANDLINE="$KDUMP_IDE_NOPROBE_COMMANDLINE $DRIVE=noprobe"
		fi
	done
	# We don't find cdrom drive.
	if [ $COUNTER -eq 0 ]; then
		KDUMP_IDE_NOPROBE_COMMANDLINE=""
	fi
}

function check_kernel_parameter()
{
	if [ -z "$KDUMP_COMMANDLINE" ]
	then
		KDUMP_COMMANDLINE=`cat /proc/cmdline`
	fi

	MEM_RESERVED=`cat /sys/kernel/kexec_crash_size`

	if [ $MEM_RESERVED -eq 0 ]
	then
		return 1
	else
		return 0
	fi
}

# Load the kdump kerel specified in /etc/sysconfig/kdump
# If none is specified, try to load a kdump kernel with the same version
# as the currently running kernel.
function load_kdump()
{
	ARCH=`uname -m`

	# Get the approx amount of ram the kernel is using in Kb
	KMEMINUSE=`awk '/Slab:.*/ {print $2}' /proc/meminfo`
	# Convert the reserved ram amount to Kb
	MEM_RESERVED=`dc -e"$MEM_RESERVED 1024 / p"`

	# Take 70% of the reserved value rounding up to the nearest integer
	MEM_RESERVED=`dc -e"$MEM_RESERVED .7 * 10 * 10 / p"`

	#Check if the KMEMINUSE is greater than MEM_RESERVED
	# This indicates that the currently runnign kernel is using
	# 70% of the amount of memory that we have reserved for kdump
	# we should issue a warning here indicating that the user may
	# want to increase the amount of reserved ram on the system
	if [ $KMEMINUSE -gt $MEM_RESERVED ]
	then
		echo -n "Your running kernel is using more than 70% of the amount of space you reserved for kdump, you should consider increasing your crashkernel reservation"
		warning
		echo
	fi 

	if [ "$ARCH" == "i686" -o "$ARCH" == "i386" ]
	then

		need_64bit_headers
		if [ $? == 1 ]
		then
			FOUND_ELF_ARGS=`echo $KEXEC_ARGS | grep elf32-core-headers`
			if [ -n "$FOUND_ELF_ARGS" ]
			then
				echo -n "Warning: elf32-core-headers overrides correct elf64 setting"
				warning
				echo
			else	
				KEXEC_ARGS="$KEXEC_ARGS --elf64-core-headers"
			fi
		else
			FOUND_ELF_ARGS=`echo $KEXEC_ARGS | grep elf64-core-headers`
			if [ -z "$FOUND_ELF_ARGS" ]
			then
				KEXEC_ARGS="$KEXEC_ARGS --elf32-core-headers"
			fi
		fi
	fi

	KDUMP_COMMANDLINE=`echo $KDUMP_COMMANDLINE | sed -e 's/crashkernel=[^ ]*//'`
	KDUMP_COMMANDLINE=`echo $KDUMP_COMMANDLINE | sed -e 's/mem=[0-9]\+[GMKgmk]* *//'`
	KDUMP_COMMANDLINE="${KDUMP_COMMANDLINE} ${KDUMP_COMMANDLINE_APPEND}"
	avoid_cdrom_drive
	KDUMP_COMMANDLINE="${KDUMP_COMMANDLINE} ${KDUMP_IDE_NOPROBE_COMMANDLINE}"

	mount -t debugfs debug /sys/kernel/debug
	
	$KEXEC $KEXEC_ARGS $standard_kexec_args \
		--command-line="$KDUMP_COMMANDLINE" \
		--initrd=$kdump_initrd $kdump_kernel 2>/dev/null
	if [ $? == 0 ]; then
		umount /sys/kernel/debug
		$LOGGER "kexec: loaded kdump kernel"
		return 0
	else
		umount /sys/kernel/debug
		$LOGGER "kexec: failed to load kdump kernel"
		return 1
	fi
}

function propagate_ssh_key()
{
	#Check if selinux is on... must flip to permissive mode
	#for the moment to create key, then flip back...
	se_enforce=`/usr/sbin/sestatus | grep -c "^Current mode.*enforcing"`
	if [ "$se_enforce" -ge 1 ]; then
		/usr/sbin/setenforce 0 2>&1 > /dev/null
	fi

	#Use dedicated key for kdump
	if [ ! -d /root/.ssh ]; then
		mkdir /root/.ssh
		chmod 700 /root/.ssh
	fi
	if [ ! -e /root/.ssh/config ]; then
		echo "IdentityFile ~/.ssh/kdump_id_rsa" >> /root/.ssh/config
	elif [ `grep -c kdump_id_rsa /root/.ssh/config` -eq 0 ]; then
		echo "IdentityFile ~/.ssh/kdump_id_rsa" >> /root/.ssh/config
	fi
	local KEYFILE=/root/.ssh/kdump_id_rsa.pub
	local errmsg="Failed to propagate ssh key"

	#make sure they've configured kdump.conf for ssh dumps
	local SSH_TARGET=`awk '/^\ *net.*@.*$/ {print $0}' $KDUMP_CONFIG_FILE`
	if [ -z "$SSH_TARGET" ]; then
		echo "No ssh config specified in $KDUMP_CONFIG_FILE.  Can't propagate"
		$LOGGER "$errmsg, no ssh config specified in $KDUMP_CONFIG_FILE"
		exit 1
	fi

	#Check to see if we already created key, if not, create it.
	if [ -f $KEYFILE ]; then
		echo "Using existing keys..."
	else
		echo -n "Generating new ssh keys... "
		/usr/bin/ssh-keygen -t rsa -f /root/.ssh/kdump_id_rsa -N "" 2>&1 > /dev/null
		echo "done."
	fi

	#If necessary, flip selinux back to enforcing
	if [ "$se_enforce" -ge 1 ]; then
		/usr/sbin/setenforce 1 2>&1 > /dev/null
	fi
	
	#now find the target ssh user and server to contact.
	SSH_USER=`echo $SSH_TARGET | cut -d\  -f2 | cut -d@ -f1`
	SSH_SERVER=`echo $SSH_TARGET | sed -e's/\(.*@\)\(.*$\)/\2/'`
 
	#now send the found key to the found server
	ssh-copy-id -i $KEYFILE $SSH_USER@$SSH_SERVER &>/dev/null
	RET=$?
	if [ $RET == 0 ]; then
		echo $KEYFILE has been added to ~$SSH_USER/.ssh/authorized_keys on $SSH_SERVER
		$LOGGER "propagated ssh key (ssh server: $SSH_SERVER)"
		return 0
	else
		echo $KEYFILE failed in transfer to $SSH_SERVER
		$LOGGER "$errmsg, unable to transfer $KEYFILE to $SSH_SERVER"
		exit 1
	fi
		
}

function status()
{
	if [ ! -e /sys/kernel/kexec_crash_loaded ]
	then
		return 2 
	fi
	if [ -f /proc/xen/capabilities ] && grep -q "control_d" /proc/xen/capabilities
	then
		: # We are in dom0
	elif [ -f /sys/hypervisor/type ] && grep -q "xen" /sys/hypervisor/type
	then
		return 2
	fi
	rc=`cat /sys/kernel/kexec_crash_loaded`
	if [ $rc == 1 ]; then
		return 0
	else
		return 1
	fi
}

function start()
{
	#TODO check raw partition for core dump image
	status 
	rc=$?
	if [ $rc == 2 ]; then
		echo -n "Kdump is not supported on this kernel"; failure; echo
		return 1;
	else
		if [ $rc == 0 ]; then
			echo -n "Kdump already running"; success; echo
			return 0
		fi
	fi

	check_kernel_parameter
	if [ $? != 0 ]; then
		echo -n "Starting kdump:"; failure; echo
		$LOGGER "No crashkernel parameter specified for running kernel"
		return 1
	fi

	check_config
	if [ $? != 0 ]; then
		echo -n "Starting kdump:"; failure; echo
		$LOGGER "failed to start up, config file incorrect"
		return 1
	fi
	load_kdump
	if [ $? != 0 ]; then
		echo -n "Starting kdump:"; failure; echo
		$LOGGER "failed to start up"
		return 1
	fi

	echo -n "Starting kdump:"; success; echo
	$LOGGER "started up"
}

function stop()
{
	$KEXEC -p -u 2>/dev/null
	if [ $? == 0 ]; then
		$LOGGER "kexec: unloaded kdump kernel"
		echo -n "Stopping kdump:"; success; echo
		$LOGGER "stopped"
		return 0
	else
		$LOGGER "kexec: failed to unload kdump kernel"
		echo -n "Stopping kdump:"; failure; echo
		$LOGGER "failed to stop"
		return 1
	fi
}

case "$1" in
  start)
	if [ -s /proc/vmcore ]; then
		save_core
		reboot
	else
		start
	fi
	;;
  stop)
	stop
	;;
  status)
	EXIT_CODE=0
	status
	case "$?" in
	0)
		echo "Kdump is operational"
		EXIT_CODE=0
		;;
	1)
		echo "Kdump is not operational"
		EXIT_CODE=3
		;;
	2)
		echo "Kdump is unsupported on this kernel"
		EXIT_CODE=3
		;;
	esac
	exit $EXIT_CODE
	;;
  restart)
	stop
	start
	;;
  condrestart)
        EXIT_CODE=1
        status
        case "$?" in
        0)
                stop
                start
                EXIT_CODE=0
        ;;
        esac
        exit $EXIT_CODE
	;;
  propagate)
	propagate_ssh_key
	;;
  *)
	echo $"Usage: $0 {start|stop|status|restart|propagate}"
	exit 1
esac

exit $?
